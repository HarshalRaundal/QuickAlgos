 For every positive integer 'a' and every integer 'n' such that 'a' and 'n' are coprime (relatively prime),
 the following holds:
// a^φ(n) ≡ 1 (mod n)

here, φ(n) is Euler's totient function, which counts the positive integers up to n that are coprime to n.
example, φ(5) = 4, since the integers 1, 2, 3, and 4 are coprime to 5.


Now Prove Euler's Theorem hold true for a = 3 and n = 10
here, 3 & 10 are coprime (gcd(3, 10) = 1).
and, φ(10) = 4, since the integers 1, 3, 7, and 9 are coprime to 10.
now , a^φ(n) = 3^4 = 81
// and 81 % 10 = 1, thus proving Euler's Theorem holds true for these values.

/**
 * Euler's Theorem
 * @param {number} a - A positive integer that is coprime to n.
 * @param {number} n - A positive integer.
 * @returns {boolean} True if a^φ(n) ≡ 1 (mod n), otherwise false.
 * @throws {Error} If a is not coprime to n or if n is not a positive integer.
 */
function eulerTheorem(a, n) {
    if (n <= 0 || !Number.isInteger(n) || n % 1 !== 0) {
        throw new Error("n must be a positive integer.");
    }
    if (a <= 0 || !Number.isInteger(a) || a % 1 !== 0) {
        throw new Error("a must be a positive integer.");
    }

    // Function to calculate gcd
    function gcd(x, y) {
        while (y !== 0) {
            const temp = y;
            y = x % y;
            x = temp;
        }
        return x;
    }

    // Check if a and n are coprime
    if (gcd(a, n) !== 1) {
        throw new Error("a and n must be coprime.");
    }

    // Calculate φ(n)
    function eulerTotient(n) {
        let result = n;
        for (let p = 2; p * p <= n; p++) {
            if (n % p === 0) {
                while (n % p === 0) {
                    n /= p;
                }
                result -= result / p;
            }
        }
        if (n > 1) {
            result -= result / n;
        }
        return result;
    }

    const phiN = eulerTotient(n);

    // Calculate a^φ(n) mod n
    let result = 1;
    for (let i = 0; i < phiN; i++) {
        result = (result * a) % n;
    }

    return result === 1;